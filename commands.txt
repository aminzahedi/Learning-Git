git --version
git config --global user.name "Amin Zahedi"
git config --global user.email "zahediamin95@gmail.com"
git config user.name
git config user.email
ls (List contents)
ls Downloads/
ls Downloads/Academic
ls -a (all files including hidden files)
cd (change directory)
cd ~ (home directory)
cd .. (back up one directory)
open . (open the directory only on MAC)
open Downloads/
start . (open the directory only on Windows)
start Downloads/
clear
pwd (print working directory - prints the path to the current directory)
touch newFile.cpp newFile.txt newFile.pdf (create one/multiple files)
touch Downloads/test.txt
mkdir newFolder1 newFolder2 (create directories)
rm File.txt (removing files/gone forever!/cannot delete directories)
rm Downloads/File.pdf
rm -rf (r=recursive/f=force/removes folders/gone forever!)
git status (current status of the git repository) 
git init (create a new repo)
git add [file1] [file2] (adding files into the staging area/group them for commiting)
git add . (stage all changes at once)
git restore --staged [file1] [file2] (to unstage the files)
git commit -m "message" (not suitable for a paragraph of message/only a line)
git commit -a -m (commiting all unstaged changes/no need git add)
git commit (opens VIM -> hit "i"-> write the commit message-> hit "esc" one time to exit insert mode -> :wq "write quite")
git commit (opens an editor, write the message, save and close it)
git log (use q to exit)
git log --oneline
git config --global core.editor "code --wait" (setting VSCODE as the editor)
if it shows code: command not found => Open comman pallet in VSCODE "control shift P"=> type "code" => install code command in path
git config core.editor (check the editor)
git commit --amend (only redo the previous commit/the tip of the current branch)
.gitignore (files or directories Git would ignore in a givven repo/secrets/API keys, credentials, operating system files, log files, dependencies and packages/at root of the directory)
git branch (view existing branches/the active branch has *)
git branch -v (view existing branches with more details of hashes and commit messages)
git branch [branch-name] (create branch/shouldnt have a space in the name)
git branch -d/--delete [branch-name] (deleting a branch/ cant delete the branch checked out at)
git branch -D [branch-name] (--delete --force/ would delte before even merging)
git branch -m [new name] (rename the branch/ have to be on the branch)
(Head always pointing to the tip of the last commit)
git switch [branch-name] (switch to another branch)
git switch -c [branch-name] (create and switch at the same time)
git checkout [branch-name] (switch to another branch)
git checkout -b [branch-name] (create and switch at the same time)
git merge [branch-name] (should be at the destination branch and merge the other branch)
git diff (changes in the working directory that are not staged; viewing unstaged changes)
git diff HEAD (list all the changes in the working directory since the last commit; since HEAD; staged and unstaged changes)
git diff --staged (shows only staged changes)
git diff --cached (shows only staged changes)
git diff HEAD/--staged [file name] [file name] (only consider a file)
git diff HEAD HEAD~1 (changes from previous commit and current commit)
git diff HEAD~1 (swaping the previous and current commits to look)
git diff [branch 1]..[branch 2] (all the files that committed;also can narrow it down to a specific file)
git diff [commit 1]..[commit 2] (using short hashes/git log --oneline)
code . (opens VSCode)